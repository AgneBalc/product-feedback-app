// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum CATEGORY_TYPE {
  UI
  UX
  Enhancement
  Bug
  Feature
}

enum STATUS {
  SUGGESTIONS
  PLANNED
  IN_PROGRESS
  LIVE
}

model User {
  id               String       @id @default(uuid())
  name             String
  username         String       @unique
  email            String       @unique
  password         String
  image            String?
  createdFeedbacks Feedback[]
  upvotedFeedbacks UserUpvote[]
  comments         Comment[]
}

model Feedback {
  id          String        @id @default(uuid())
  title       String
  category    CATEGORY_TYPE
  status      STATUS        @default(SUGGESTIONS)
  upvotes     Int           @default(0)
  description String
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String
  upvotedBy   UserUpvote[]
  comments    Comment[]

  @@index([authorId])
}

model UserUpvote {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String

  @@unique([userId, feedbackId])
  @@index([feedbackId])
}

model Comment {
  id         String   @id @default(uuid())
  content    String   @db.VarChar(250)
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  feedbackId String

  replies   Comment[] @relation("reply_to")
  replyTo   Comment?  @relation("reply_to", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?

  @@index([authorId])
  @@index([feedbackId])
  @@index([replyToId])
}
